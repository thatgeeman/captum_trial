# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_data.ipynb.

# %% auto 0
__all__ = ['get_cifar', 'CIFARDataset', 'get_dls']

# %% ../nbs/02_data.ipynb 2
import torch
from torch import nn
import torch.nn.functional as F
import torchvision
from torch.utils.data import Dataset, DataLoader

from typing import Any, Union, Tuple

# %% ../nbs/02_data.ipynb 3
_size_2_t = Union[int, Tuple[int, int]]

# %% ../nbs/02_data.ipynb 4
def get_cifar():
    train_ds = torchvision.datasets.CIFAR10(root='../.sample/train', train=True, download=True)
    test_ds = torchvision.datasets.CIFAR10(root='../.sample/test', train=False, download=True)
    return train_ds, test_ds

# %% ../nbs/02_data.ipynb 6
class CIFARDataset(Dataset):
    def __init__(self, ds) -> None:
        super().__init__()
        self.ds = ds 
    def __getitem__(self, index) -> Any:
        img = torch.Tensor(self.ds.data[index]).permute(2, 0, 1)
        target = torch.Tensor([self.ds.targets[index]])
        return img.to(torch.float32), target.to(torch.float32)
    def __len__(self):
        return len(self.ds)


# %% ../nbs/02_data.ipynb 9
def get_dls(batch_size=100):
    train_data, test_data = get_cifar()
    train_ds = CIFARDataset(train_data)
    test_ds = CIFARDataset(test_data)
    train_dls = DataLoader(train_ds, batch_size=batch_size, drop_last=True, num_workers=4, shuffle=True)
    test_dls = DataLoader(test_ds, batch_size=batch_size, drop_last=False, num_workers=4, shuffle=False)
    return train_dls, test_dls

